# https://help.github.com/en/actions/automating-your-workflow-with-github-actions
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/virtual-environments-for-github-hosted-runners
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#using-a-specific-shell
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-powershell
# https://github.com/actions/upload-artifact#where-does-the-upload-go
name: ActionsTest-Windows-pwsh-Build
on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pwsh: [ '7.1.3' ]
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '3.1.x'
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.5.0'
    - name: Determine Version
      id:   gitversion # id to later be referenced
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true
    - name: Display GitVersion outputs (step output)
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    - name: Display GitVersion outputs (step output with prefix)
      run: |
        echo "Major: ${{ steps.gitversion.outputs.GitVersion_Major }}"
        echo "Minor: ${{ steps.gitversion.outputs.GitVersion_Minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.GitVersion_Patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.GitVersion_PreReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.GitVersion_PreReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.GitVersion_PreReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.GitVersion_PreReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.GitVersion_WeightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.GitVersion_BuildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.GitVersion_BuildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.GitVersion_FullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.GitVersion_MajorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.GitVersion_SemVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.GitVersion_LegacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.GitVersion_LegacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.GitVersion_AssemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.GitVersion_AssemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.GitVersion_FullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.GitVersion_InformationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.GitVersion_BranchName }}"
        echo "EscapedBranchName: ${{ steps.gitversion.outputs.GitVersion_EscapedBranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.GitVersion_Sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.GitVersion_ShortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.GitVersion_NuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.GitVersion_NuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.GitVersion_NuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.GitVersion_NuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.GitVersion_VersionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.GitVersion_CommitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.GitVersion_CommitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ steps.gitversion.outputs.GitVersion_UncommittedChanges }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.GitVersion_CommitDate }}"
    - name: Display the path
      shell: pwsh
      run: echo ${env:PATH}
    - name: Version Display
      shell: pwsh
      run: $PSVersionTable
    # uncomment below to explore what modules/variables/env variables are available in the build image
    # - name: Modules and Variables Display
    #   shell: pwsh
    #   run: Get-Module -ListAvailable; (Get-Variable).GetEnumerator() | Sort-Object Name | Out-String; (Get-ChildItem env:*).GetEnumerator() | Sort-Object Name | Out-String
    - name: Bootstrap
      shell: pwsh
      run: ./actions_bootstrap.ps1
    - name: Test and Build
      shell: pwsh
      run: Invoke-Build -File .\src\ALZ.build.ps1
    - name: Upload pester results
      uses: actions/upload-artifact@v3
      with:
        name: pester-results
        path: .\src\Artifacts\testOutput
        if-no-files-found: warn
    - name: Upload zip module archive build
      uses: actions/upload-artifact@v3
      with:
        name: zip-archive
        path: .\src\Archive
        if-no-files-found: warn
    - name: Package ALZ Module
      shell: pwsh
      run: ./package_ALZ.ps1
    # - name: Publish Module to PowerShell Gallery
    #   uses: pcgeek86/publish-powershell-module-action@v20
    #   id: publish-module
    #   with:
    #     NuGetApiKey: ${{ secrets.POWERSHELL_GALLERY_KEY }}

